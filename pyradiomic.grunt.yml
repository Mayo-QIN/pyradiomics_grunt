
# A service consists of the following fields:
# endPoint      -- REST endpoint, e.g. /rest/service/<endPoint>
# commandLine   -- Command line to run
#                  Some special command line parameters are
#                  #value  -- replace this argument with the parameter from the POST
#                  <in     -- look for an uploaded file
#                  ^in     -- uploaded file must be a zip file, extract in a directory (called in) and pass directory name as an output
#                  ~out    -- specify out on the command line as a directory, zip contents for download
#                  >out    -- the process will generate this file for later download
# description   -- description of the endpoint, rendered in Markdown
# defaults      -- a hashmap of default values for "#value" parameters

# this example configuration file exposes 2 endpoints, echo and copy
# echo simply echos the input and can be called like this:
# curl -X POST  -v --form Message=hi localhost:9901/rest/service/echo

# copy takes input and output files.  <in must be provided
# curl -X POST  -v --form in=#README.md --form output=R.md localhost:9901/rest/service/copy
# NB: "--form input=#README.md" indicates that curl should send README.md as the form parameter "input"
#     and the output filename is set to "R.md"
#
# to retrieve the output data, first find the UUID in the response, and request the file
# wget localhost:9901/rest/job/eab4ab07-c8f7-44f7-b7d8-87dbd7226ea4/file/out
# NB: we request the output file using the "out" parameter, not the filename we requested

# Here is the copy example using jq(http://stedolan.github.io/jq/) to help a bit
#
# id=`curl --silent -X POST --form in=#README.md --form out=small_file.txt localhost:9901/rest/service/copy | jq -r .uuid`
# wget --content-disposition localhost:9901/rest/job/$id/file/output

# The Slicer CLI is supported by grunt, see https://www.slicer.org/slicerWiki/index.php/Documentation/Nightly/Developers/SlicerExecutionModel for details.
# To expose a Slicer CLI via grunt, add entries like this:
# cli:
#   - endPoint: extractskeleton
#     executable: /Applications/Slicer.app/Contents/lib/Slicer-4.5/cli-modules/ExtractSkeleton
#   - endPoint: blur
#     executable: /Applications/Slicer.app/Contents/lib/Slicer-4.5/cli-modules/GaussianBlurImageFilter
#
# This example will create 2 extra endpoints, extractskeleton and blur corresponding to the
# executables at the paths listed.

# This is the hostname:port that the server is running on.
# Used for logging and email
server: localhost:9901
# Working directory
# This is the directory path used for working files. If left blank,
# use a system temp directory.
# NB: To run in the pesscara/grunt docker, this must be set to /data
directory: /data

# Report Warn status to Consul when we have more than warnLevel jobs
warnLevel: 3
# Report Critical status to Consul when we have more than criticalLevel jobs
warnLevel: 5

services:
  - endPoint: pyradiomics
    commandLine: ["pyradiomics","<image", "<mask", "--out", ">outputfile", "--format","#format", "--param", "<param","--label","#label"]
    description: |
      This tool can be used to calclulate texture features. For more information http://pyradiomics.readthedocs.io/en/latest/installation.html
    parameter_descriptions:
      image: The input file (nii, nii.gz, img, ..)
      mask: An input file containing the masks of the areas to calculate features/statistics
      param: A yml file for configuring the feature claculation
      format: Output file format txt, csv,json
      label: Value of label in mask to use for feature extraction
    defaults:
      format: csv
      verbosity: 1
      logging-level: DEBUG
      outputfile: test
